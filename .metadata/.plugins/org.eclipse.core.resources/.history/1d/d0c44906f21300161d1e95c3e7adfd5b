package gamesdb;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import GameReview.Credentials;
import GameReview.Game;



public class DerbyDatabase implements IDatabase {
	static {
		try {
			Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
		} catch (Exception e) {
			throw new IllegalStateException("Could not load Derby driver");
		}
	}
	
	private interface Transaction<ResultType> {
		public ResultType execute(Connection conn) throws SQLException;
	}

	private static final int MAX_ATTEMPTS = 10;

	
	@Override
	public List<Game> findAllGames() {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Game>>() {
			@Override
			public List<Game> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select games.* " +
							"  from games "
					);
					
					List<Game> result = new ArrayList<Game>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Game game = new Game();
						loadGame(game, resultSet, 1);
						
						result.add(game);
					}
					
					// check if any titles were found
					if (!found) {
						System.out.println("No games were found!");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}
	
	@Override
	public List<Credentials> findAllCredentials() {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Credentials>>() {
			@Override
			public List<Credentials> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select credentials.* " +
							"  from credentials "
					);
					
					List<Credentials> result = new ArrayList<Credentials>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Credentials credential = new Credentials();
						loadCredential(credential, resultSet, 1);
						
						result.add(credential);
					}
					
					// check if any titles were found
					if (!found) {
						System.out.println("No games were found!");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}

	@Override
	public List<Game> findGameByName(final String name) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Game>>() {
			@Override
			public List<Game> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select games.* " +
							"  from games " +
							"	where games.game_name = ? "
					);
					stmt.setString(1, name);
					
					List<Game> result = new ArrayList<Game>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Game game = new Game();
						loadGame(game, resultSet, 1);
						
						result.add(game);
					}
					
					// check if the title was found
					if (!found) {
						System.out.println("<" + name + "> was not found in the games table");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}
	
	
	
	// wrapper SQL transaction function that calls actual transaction function (which has retries)
	public<ResultType> ResultType executeTransaction(Transaction<ResultType> txn) {
		try {
			return doExecuteTransaction(txn);
		} catch (SQLException e) {
			throw new PersistenceException("Transaction failed", e);
		}
	}
	
	// SQL transaction function which retries the transaction MAX_ATTEMPTS times before failing
	public<ResultType> ResultType doExecuteTransaction(Transaction<ResultType> txn) throws SQLException {
		Connection conn = connect();
		
		try {
			int numAttempts = 0;
			boolean success = false;
			ResultType result = null;
			
			while (!success && numAttempts < MAX_ATTEMPTS) {
				try {
					result = txn.execute(conn);
					conn.commit();
					success = true;
				} catch (SQLException e) {
					if (e.getSQLState() != null && e.getSQLState().equals("41000")) {
						// Deadlock: retry (unless max retry count has been reached)
						numAttempts++;
					} else {
						// Some other kind of SQLException
						throw e;
					}
				}
			}
			
			if (!success) {
				throw new SQLException("Transaction failed (too many retries)");
			}
			
			// Success!
			return result;
		} finally {
			DBUtil.closeQuietly(conn);
		}
	}

	// TODO: Here is where you specify the location of your Derby SQL database
	// TODO: You will need to change this location to the same path as your workspace for this example
	// TODO: Change it here and in SQLDemo under CS320_Lab06->edu.ycp.cs320.sqldemo	
	private Connection connect() throws SQLException {
		Connection conn = DriverManager.getConnection("jdbc:derby:C:/Users/Kyle/workspaceTeamProject/library.db;create=true");		
		
		// Set autocommit to false to allow multiple the execution of
		// multiple queries/statements as part of the same transaction.
		conn.setAutoCommit(false);
		
		return conn;
	}
	
	// retrieves Game information from query result set
	private void loadGame(Game game, ResultSet resultSet, int index) throws SQLException {
		game.setGameId(resultSet.getInt(index++));
		game.setName(resultSet.getString(index++));
		game.setCoverPictureUrl(resultSet.getString(index++));
		game.setEmbedLinkUrl(resultSet.getString(index++));
		game.setDescription(resultSet.getString(index++));
		game.setReleasedate(resultSet.getString(index++));
		game.setGenre(resultSet.getString(index++));
	}
	
	private void loadCredential(Credentials credential, ResultSet resultSet, int index) throws SQLException {
		credential.setCredentialId(resultSet.getInt(index++));
		credential.setUsername(resultSet.getString(index++));
		credential.setPassword(resultSet.getString(index++));
	}

	
	//  creates the Authors and Books tables
	public void createTables() {
		executeTransaction(new Transaction<Boolean>() {
			@Override
			public Boolean execute(Connection conn) throws SQLException {
				PreparedStatement stmt1 = null;
				PreparedStatement stmt2 = null;
				
				try {
					stmt1 = conn.prepareStatement(
						"create table games (" +
						"	game_id integer primary key " +
						"		generated always as identity (start with 1, increment by 1), " +									
						"	game_name varchar(500)," +
						"	game_coverpictureurl varchar(2000)," +
						"	game_embedlinkurl varchar(2000)," +
						"	game_description varchar(2000)," +
						"	game_releasedate varchar(500)," +
						" 	game_genre varchar(500)" +
						")"
					);	
					stmt1.executeUpdate();
					
					stmt2 = conn.prepareStatement(
							"create table credentials (" +
							"	credential_id integer primary key " +
							"		generated always as identity (start with 1, increment by 1), " +									
							"	username varchar(500)," +
							" 	password varchar(500)" +
							")"
						);	
					
					stmt2.executeUpdate();
					
					
					return true;
				} finally {
					DBUtil.closeQuietly(stmt1);
				}
			}
		});
	}
	
	// loads data retrieved from CSV files into DB tables in batch mode
	public void loadInitialData() {
		executeTransaction(new Transaction<Boolean>() {
			@Override
			public Boolean execute(Connection conn) throws SQLException {
				List<Game> gameList;
				List<Credentials> credentialsList;
				
				try {
					gameList = InitialData.getGames();
					credentialsList = InitialData.getCredentials();
				} catch (IOException e) {
					throw new SQLException("Couldn't read initial data", e);
				}

				PreparedStatement insertGame = null;
				PreparedStatement insertCredential = null;

				try {
					insertGame = conn.prepareStatement("insert into games (game_name, game_coverpictureurl, game_embedlinkurl, game_description, game_releasedate, game_genre) values (?, ?, ?, ?, ?, ?)");
					for (Game game : gameList) {
//						insertAuthor.setInt(1, author.getAuthorId());	// auto-generated primary key, don't insert this
						insertGame.setString(1, game.getName());
						insertGame.setString(2, game.getCoverPictureUrl());
						insertGame.setString(3, game.getEmbedLinkUrl());
						insertGame.setString(4, game.getDescription());
						insertGame.setString(5, game.getReleasedate());
						insertGame.setString(6, game.getGenre());
						insertGame.addBatch();
					}
					insertGame.executeBatch();
					
					insertCredential = conn.prepareStatement("insert into credentials (username, password) values (?, ?)");
					for (Credentials credential : credentialsList) {
//						insertAuthor.setInt(1, author.getAuthorId());	// auto-generated primary key, don't insert this
						insertCredential.setString(1, credential.getUsername());
						insertCredential.setString(2, credential.getPassword());
						insertCredential.addBatch();
					}
					insertCredential.executeBatch();
					
					return true;
				} finally {
					DBUtil.closeQuietly(insertGame);
					DBUtil.closeQuietly(insertCredential);
				}
			}
		});
	}
	
	// The main method creates the database tables and loads the initial data.
	public static void main(String[] args) throws IOException {
		System.out.println("Creating tables...");
		DerbyDatabase db = new DerbyDatabase();
		db.createTables();
		
		System.out.println("Loading initial data...");
		db.loadInitialData();
		
		System.out.println("Success!");
	}

	@Override
	public List<Game> findGamesByGenre(final String genre) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Game>>() {
			@Override
			public List<Game> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select games.* " +
							"  from games " 
					);
					
					List<Game> result = new ArrayList<Game>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Game game = new Game();
						loadGame(game, resultSet, 1);
						if (game.getGenre().contains(genre)) {
						result.add(game);
						}
					}
					
					// check if the title was found
					if (!found) {
						System.out.println("<" + genre + "> was not found in the games table");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}

	@Override
	public List<Game> findGamesByReleaseDate(final String sortBy) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Game>>() {
			@Override
			public List<Game> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select games.* " +
							"  from games "
					);
					
					List<Game> result = new ArrayList<Game>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Game game = new Game();
						loadGame(game, resultSet, 1);
						
						result.add(game);
					}
					if (sortBy.equals("Oldest")) {
					Collections.sort(result);
					}
					if (sortBy.equals("Newest")) {
						Collections.sort(result);
						Collections.reverse(result);
					}
					// check if any titles were found
					if (!found) {
						System.out.println("No games were found!");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}
	
	@Override
	public List<Credentials> findCredentialsByUsername(final String username) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Credentials>>() {
			@Override
			public List<Credentials> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select credentials.* " +
							"  from credentials " +
							"  where credentials.username = ? " 
							
					);
					stmt.setString(1, username);
					
					List<Credentials> result = new ArrayList<Credentials>();
					
					resultSet = stmt.executeQuery();
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						found = true;
						
						Credentials credential = new Credentials();
						loadCredential(credential, resultSet, 1);
						result.add(credential);
					}
					
					// check if the title was found
					if (!found) {
						System.out.println("<" + username + "> was not found in the games table");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}

	@Override
	public List<Game> findGamesByNameWithoutFullName(final String name) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<List<Game>>() {
			@Override
			public List<Game> execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				ResultSet resultSet = null;
				
				try {
					stmt = conn.prepareStatement(
							"select games.* " +
							"  from games "
					);
					
					List<Game> result = new ArrayList<Game>();
					
					resultSet = stmt.executeQuery();
					
					
					// for testing that a result was returned
					Boolean found = false;
					
					while (resultSet.next()) {
						
						found = true;
						
						Game game = new Game();
						loadGame(game, resultSet, 1);
						if (game.getName().toLowerCase().contains(name.toLowerCase())) {
						result.add(game);
						}
					}
					
					// check if any titles were found
					if (!found) {
						System.out.println("No games were found!");
					}
					
					return result;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}
	
	@Override
	public Integer insertCredentialsIntoCredentialTable(final String username, final String password) {
		// TODO Auto-generated method stub
		return executeTransaction(new Transaction<Integer>() {
			@Override
			public Integer execute(Connection conn) throws SQLException {
				PreparedStatement stmt = null;
				PreparedStatement stmt2 = null;
				ResultSet resultSet = null;
				Integer credentialID = -1;
				
				try {
					stmt = conn.prepareStatement(
							"insert into credentials (username, password) " +
									"  values(?, ?) "
					);
					stmt.setString(1, username);
					stmt.setString(2, password);
					
					stmt.executeUpdate();
					
					stmt2 = conn.prepareStatement(
							"select credential_id from credentials " +
							"  where username = ? and password = ? "
					);
					stmt2.setString(1, username);
					stmt2.setString(2, password);
					
					resultSet = stmt2.executeQuery();
					if (resultSet.next()) {
						credentialID = resultSet.getInt(1);
					}
					
					return credentialID;
				} finally {
					DBUtil.closeQuietly(resultSet);
					DBUtil.closeQuietly(stmt);
				}
			}
		});
	}
		@Override
		public Integer deleteCredentialsIntoCredentialTable(final String username, final String password) {
			// TODO Auto-generated method stub
			return executeTransaction(new Transaction<Integer>() {
				@Override
				public Integer execute(Connection conn) throws SQLException {
					PreparedStatement stmt = null;
					ResultSet resultSet = null;
					Integer credentialID = -1;
					
					try {
						stmt = conn.prepareStatement(
								"insert into credentials (username, password) " +
										"  values(?, ?) "
						);
						stmt.setString(1, username);
						stmt.setString(2, password);
						
						stmt.executeUpdate();
						

						if (resultSet.next()) {
							credentialID = resultSet.getInt(1);
						}
						
						return credentialID;
					} finally {
						DBUtil.closeQuietly(resultSet);
						DBUtil.closeQuietly(stmt);
					}
				}
			});
	}

}
